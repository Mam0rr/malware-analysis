//This tool is checks the hardware of a machine in order to detect whether or not a virtual machine is being used. 
//I have decided to simply output details about the machine, however the main function can be modified in order to more
//suit the functionality of this tool.

#include <Windows.h>
#include <stdio.h>
#include <iostream>
#include <time.h>


unsigned long long getRAMSIZE() 
{
    // This is data a structure contains information regarding memory
    MEMORYSTATUSEX status;
    status.dwLength = sizeof(status);

    // Sends the machine's memory information to the "status" instance of the MEMORYSTATUSEX structure
    if (GlobalMemoryStatusEx(&status) == 0) {
        perror("GlobalMemoryStatusEx");
        return 0;
    }

    // Converts total physical memory from bytes to GB;
    return status.ullTotalPhys / (1024 * 1024 * 1024); 
}

DWORD getNumProcessors()
{
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION buffer = NULL;
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION ptr = NULL;

    DWORD buffersize = 0;
    DWORD byteOffset = 0;

    // Allocates memory for the buffer
    buffer = (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION)malloc(buffersize);
    
    bool done = false;

    while(!done)
    {
        // Retrieve the information and the size of the buffer holding it
        DWORD current = GetLogicalProcessorInformation(buffer, &buffersize);

        
        if (current == true) 
        {
            done = true;
        }
        else {
            //Reallocates memory if there was not enough
            if (GetLastError() == ERROR_INSUFFICIENT_BUFFER)
            {
                if (buffer)
                    free(buffer);

                buffer = (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION)malloc(
                    buffersize);

            }
        }
    }

    DWORD numPhysicalCores = 0;

    ptr = buffer;

    while (byteOffset + sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION) <= buffersize)
    {
        // Should the current entry be about another processor core, increment the number of physical cores
        if (ptr->Relationship == RelationProcessorCore)
        {
            numPhysicalCores++;
        }

        // Move the pointer to the next entry in the buffer
        byteOffset += sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION);
        ptr++;
    }

    // Frees the allocated buffer
    free(buffer);

    return numPhysicalCores;
} 

bool checkClockDrift() {

    bool driftDetected = false;

    time_t startTime;
    time_t endTime;

    for (int i = 0; i < 20; i++)
    {
        startTime = time(NULL);

        // Sleeps for 2 seconds
        Sleep(2);

        endTime = time(NULL);

        double timeDifference = difftime(endTime, startTime); 

        if (timeDifference > 0.1) {
            driftDetected = true;
        }


        return driftDetected;
    }
}

int main()
{
    unsigned long long ramSize = getRAMSIZE();
    DWORD numProcessors = getNumProcessors();
    bool hasClockDrift = checkClockDrift();

    printf("RAM Size: %llu GB\n", ramSize);
    printf("Number of Processors: %u\n", numProcessors);

    if (hasClockDrift)
    {
        printf("Clock Drift Detected!\n");
    }
    else
    {
        printf("No Clock Drift Detected.\n");
    }

    return 0;

}
